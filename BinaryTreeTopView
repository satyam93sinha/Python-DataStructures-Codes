class Node:
    def __init__(self, info): 
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

class BinarySearchTree:
    def __init__(self): 
        self.root = None

    def create(self, val):  
        if self.root == None:
            self.root = Node(val)
        else:
            current = self.root
         
            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break

"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.info (the value of the node)
"""
def topView(root):
    #Write your code here
    # Using Level Order Traversal
    dic, queue, current, current.level = dict(), [], root, 0
    queue.append(current)
    while len(queue)>0:
        current = queue.pop(0)
        try:
            dic[current.level].append(current.info)
        except:
            dic[current.level] = [current.info]
        if current.left:
            queue.append(current.left)
            current.left.level = current.level-1
        if current.right:
            queue.append(current.right)
            current.right.level = current.level+1
    for i in sorted(dic):
        print(dic[i][0], end = ' ')



tree = BinarySearchTree()
t = int(input())

arr = list(map(int, input().split()))

for i in range(t):
    tree.create(arr[i])

topView(tree.root)
