References:
https://www.geeksforgeeks.org/circular-queue-set-1-introduction-array-implementation/
https://leetcode.com/explore/learn/card/queue-stack/228/first-in-first-out-data-structure/1337/

CIRCULAR QUEUE
-------------------------------------------------------------------------------------------------
Intuition:
In Python, we mainly use collections.deque which pops popleft() or front of queue in O(1) and appends to the
rear of list in O(1) using append(). It automatically deletes the front index when using popleft() thus, front
of queue is always maintained at 0th index and rear at (len-1)th index which signifies Python implementation of
Queue is already TIME and SPACE optimized to O(1).

Definition of Circular Queue:
=============================
Circular Queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle
and the last position is connected back to the first position to make a circle. It is also called ‘Ring Buffer’.
One of the benefits of the circular queue is that we can make use of the spaces in front of the queue.
In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue.
But using the circular queue, we can use the space to store new values. 
Specifically, we may use a fixed-size array and two pointers to indicate the starting position and the ending position.
And the goal is to reuse the wasted storage we mentioned previously.

======================================================================================================================================
ALGORITHM:
1. Initialize data structure in constructor __init__(self, size): to set self.front, self.rear, self.size, self.queue to be
accessible throughout the class as instance class and be modified easily.
2. isEmpty(): Queue will be empty if and only if (self.front == -1)
3. isFull(): Queue will be full if and only if
    i) ((self.rear == self.size-1 && self.front == 0) or (self.rear == self.front-1))
        self.size-1 signifies the last element of self.queue and (self.front==0) suggests self.queue isn't empty
        (self.rear == self.front-1) already in a circle, self.front became the last element of self.queue and self.rear, the second last
    ii) (self.rear+1)%self.size == self.front, if rear becomes 4, last index, (4+1)%5==0, which is self.front, means isFull()
4. Rear(): return rear element
5. Front(): return front element
6. enQueue(): if empty, we can simply add element
              if full, we can never add element, check it using self.isFull()
              when self.queue is neither full nor completely empty but there are some vacant spaces
=======================================================================================================================================
CODE:
--------------
class MyCircularQueue:

    def __init__(self, k: int):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        """
        self.queue = [None for i in range(k)]
        self.front = self.rear = -1
        self.size = k
        

    def enQueue(self, value: int) -> bool:
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        """
        if self.isEmpty():
            self.front = self.rear = 0
            self.queue[self.front] = value
        else:
            if self.isFull():
                return False
            else:
                self.rear = (self.rear+1) % self.size
                self.queue[self.rear] = value
        return True
        

    def deQueue(self) -> bool:
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        """
        if self.isEmpty():
            return False
        else:
            # Only one element in queue
            if self.front == self.rear:
                self.front = self.rear = -1
            else:
                self.front = (self.front+1) % self.size
            return True
        

    def Front(self) -> int:
        """
        Get the front item from the queue.
        """
        if self.isEmpty():
            return -1
        else:
            return self.queue[self.front]

    def Rear(self) -> int:
        """
        Get the last item from the queue.
        """
        if self.isEmpty():
            return -1
        else:
            return self.queue[self.rear]
        

    def isEmpty(self) -> bool:
        """
        Checks whether the circular queue is empty or not.
        """
        if self.front == -1:
            return True
        else:
            return False
        

    def isFull(self) -> bool:
        """
        Checks whether the circular queue is full or not.
        """
        if (self.rear + 1) % self.size == self.front:
            return True
        else:
            return False
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
